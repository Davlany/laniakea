// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/sirius.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	GetFriendlyPeers(ctx context.Context, in *UserData, opts ...grpc.CallOption) (Services_GetFriendlyPeersClient, error)
	Answer(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*StatusCode, error)
	RegisterUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*StatusCode, error)
	AddToWaitUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*StatusCode, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) GetFriendlyPeers(ctx context.Context, in *UserData, opts ...grpc.CallOption) (Services_GetFriendlyPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Services_ServiceDesc.Streams[0], "/sirius.Services/GetFriendlyPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesGetFriendlyPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Services_GetFriendlyPeersClient interface {
	Recv() (*UserIPData, error)
	grpc.ClientStream
}

type servicesGetFriendlyPeersClient struct {
	grpc.ClientStream
}

func (x *servicesGetFriendlyPeersClient) Recv() (*UserIPData, error) {
	m := new(UserIPData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesClient) Answer(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/sirius.Services/Answer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) RegisterUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/sirius.Services/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) AddToWaitUser(ctx context.Context, in *UserData, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := c.cc.Invoke(ctx, "/sirius.Services/AddToWaitUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServer is the server API for Services service.
// All implementations must embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	GetFriendlyPeers(*UserData, Services_GetFriendlyPeersServer) error
	Answer(context.Context, *UserData) (*StatusCode, error)
	RegisterUser(context.Context, *UserData) (*StatusCode, error)
	AddToWaitUser(context.Context, *UserData) (*StatusCode, error)
	mustEmbedUnimplementedServicesServer()
}

// UnimplementedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (UnimplementedServicesServer) GetFriendlyPeers(*UserData, Services_GetFriendlyPeersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFriendlyPeers not implemented")
}
func (UnimplementedServicesServer) Answer(context.Context, *UserData) (*StatusCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Answer not implemented")
}
func (UnimplementedServicesServer) RegisterUser(context.Context, *UserData) (*StatusCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedServicesServer) AddToWaitUser(context.Context, *UserData) (*StatusCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWaitUser not implemented")
}
func (UnimplementedServicesServer) mustEmbedUnimplementedServicesServer() {}

// UnsafeServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServer will
// result in compilation errors.
type UnsafeServicesServer interface {
	mustEmbedUnimplementedServicesServer()
}

func RegisterServicesServer(s grpc.ServiceRegistrar, srv ServicesServer) {
	s.RegisterService(&Services_ServiceDesc, srv)
}

func _Services_GetFriendlyPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicesServer).GetFriendlyPeers(m, &servicesGetFriendlyPeersServer{stream})
}

type Services_GetFriendlyPeersServer interface {
	Send(*UserIPData) error
	grpc.ServerStream
}

type servicesGetFriendlyPeersServer struct {
	grpc.ServerStream
}

func (x *servicesGetFriendlyPeersServer) Send(m *UserIPData) error {
	return x.ServerStream.SendMsg(m)
}

func _Services_Answer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).Answer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sirius.Services/Answer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).Answer(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sirius.Services/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).RegisterUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_AddToWaitUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).AddToWaitUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sirius.Services/AddToWaitUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).AddToWaitUser(ctx, req.(*UserData))
	}
	return interceptor(ctx, in, info, handler)
}

// Services_ServiceDesc is the grpc.ServiceDesc for Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sirius.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Answer",
			Handler:    _Services_Answer_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Services_RegisterUser_Handler,
		},
		{
			MethodName: "AddToWaitUser",
			Handler:    _Services_AddToWaitUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFriendlyPeers",
			Handler:       _Services_GetFriendlyPeers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/sirius.proto",
}
